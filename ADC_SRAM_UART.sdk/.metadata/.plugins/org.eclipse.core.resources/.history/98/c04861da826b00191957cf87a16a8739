#include "xparameters.h"
#include "xgpio.h"
#include "xil_exception.h"
#include "xstreamer.h"
#include "xil_cache.h"
#include "xllfifo.h"
#include "xstatus.h"
#include <xuartlite_l.h>
#include "xspi.h"
#include "xspi_l.h"
#include "xil_printf.h"


#define ADC1_FIFO_DEV_ID	   	XPAR_AXI_FIFO_0_DEVICE_ID   /* ADC1 FIFO instance */
#define ADC2_FIFO_DEV_ID	   	XPAR_AXI_FIFO_1_DEVICE_ID   /* ADC2 FIFO instance */
#define SPI_DEV_ID			      XPAR_SPI_0_DEVICE_ID 		/* Oscillator SPI instance */

#define UART_BASE_ADDR    0x40600000  /* Base Address of UART IP */
#define SRAM_BASE_ADDR    0x60000000  /* Base Address of SRAM IP */

#define BTN1_MASK         0b1			    /* Bit mask for BTN1*/
#define LED1_MASK         0b1			    /* Bit mask for BTN1*/
#define LED2_MASK         0b10				/* Bit mask for BTN1*/
#define ADC1_DONE_MASK    0b1  	     	/* Bit mask for ADC 1  DONE */
#define ADC2_DONE_MASK    0b10  	   	/* Bit mask for ADC 2 DONE */
#define ADC1_ENABLE_MASK  0b10  	   	/* Bit mask for ADC 1 ENABLE */
#define ADC2_ENABLE_MASK  0b100  	    /* Bit mask for ADC 2 ENABLE */
#define RESET_MASK        0b1  			  /* Bit mask for Software Reset */
#define ALL_ADCS_DONE_MASK    (ADC1_DONE_MASK|ADC2_DONE_MASK) 		  /* Bit mask all ADCs DONE */
#define ALL_ADCS_ENABLE_MASK  (ADC1_ENABLE_MASK|ADC2_ENABLE_MASK) 	/* Bit mask for all ADCs ENABLE */

#define WORD_SIZE            4        /* Size of words in bytes */
#define SAMPLES_PER_ADC      32000		/* Total number of samples per ADC*/
#define SPI_TX_BUFFER_SIZE	 4 			  /* Size SPI Tx Buffer */

#undef DEBUG

/************************** Function Prototypes ******************************/
int ProgramOscillator(XSpi *SpiInstancePtr, u16 SpiDeviceId);
int InitialiseGPIO(XGpio *Instance0Ptr, XGpio *Instance1Ptr);
int InitialiseRecieveChain(XLlFifo *InstancePtr, u16 DeviceId);
int RecieveSamples(XLlFifo *InstancePtr, u32 *DestinationAddr);
int TransmitSamplesOverUART(u32 DestinationAddr);

int IsBTN1Pressed(void);
int HandleSerialCommand(void);

void CheckStatus(int status);
void Reset(void);

/************************** Variable Definitions *****************************/
XSpi  SpiInstance;
XLlFifo Fifo1Instance;
XLlFifo Fifo2Instance;
XGpio Gpio0Instance;
XGpio Gpio1Instance;

u32 NumSamplesToTx = 200;

/******************************* Functions ***********************************/
int main (){
  int status;
  int recieved;

  xil_printf("RESET\n\r");
/*--- Initaise---*/
  status = InitialiseGPIO(&Gpio0Instance, &Gpio1Instance); //Init GPIO blocks
  CheckStatus(status);

  status = InitialiseRecieveChain(&Fifo1Instance, ADC1_FIFO_DEV_ID); // Initaise ADC1 Rx chain
  CheckStatus(status);

  status = InitialiseRecieveChain(&Fifo2Instance, ADC2_FIFO_DEV_ID); // Initaise ADC2 Rx chain
  CheckStatus(status);

  XGpio_DiscreteWrite(&Gpio0Instance, 2, LED1_MASK); //Turn on LED1 (to show programming is successful)
	xil_printf("Inilised and ready to sample\r");

/*--- Wait for trigger ---*/
  int waiting = TRUE;
  while(waiting){
   if(IsBTN1Pressed()){
     waiting = FALSE;
   }
   if(HandleSerialCommand()){
     waiting = FALSE;
   }
  }

/*--- Sample ---*/
	XGpio_DiscreteWrite(&Gpio1Instance, 2, ALL_ADCS_ENABLE_MASK ); //Sends enable signal to ADCs
	XGpio_DiscreteWrite(&Gpio0Instance, 2, LED2_MASK); //Turn on LED2
  xil_printf("Sampling Started\r");

  waiting = TRUE;
	while (waiting){
		recieved = XGpio_DiscreteRead(&Gpio1Instance, 1);
		if ((recieved & ALL_ADCS_DONE_MASK) == ALL_ADCS_DONE_MASK){
			xil_printf("Sampling complete\n\r");
			XGpio_DiscreteWrite(&Gpio0Instance, 2, (LED1_MASK | LED2_MASK)); //Turn on LED2
			waiting = FALSE;
		}
	}

/*--- Transfer to SRAM ---*/
  xil_printf("Will transfer via SRAM\n\r");

  status = RecieveSamples(&Fifo1Instance, *SRAM_BASE_ADDR);
  CheckStatus(status);

  status = RecieveSamples(&Fifo2Instance, *SRAM_BASE_ADDR + (SAMPLES_PER_ADC));
  CheckStatus(status);

/*--- Send over UART ---*/
  xil_printf("ADC1 ");
  status = TransmitSamplesOverUART(SRAM_BASE_ADDR); //Send ADC1 data over UART
  CheckStatus(status);

  xil_printf("ADC2 ");
  status = TransmitSamplesOverUART(SRAM_BASE_ADDR + SAMPLES_PER_ADC); //Send ADC1 data over UART
  CheckStatus(status);

/*--- Reset ---*/
  xil_printf("Resetting\n\r");
  Reset();
  return XST_SUCCESS;
  }

int InitialiseGPIO(XGpio *Instance0Ptr, XGpio *Instance1Ptr){
	  XGpio_Initialize(Instance0Ptr, 0); //inits the Gpio0Instance for LEDs and BUttons
	  XGpio_Initialize(Instance1Ptr,1); //Initis the Gpio0Instance for internal devices
	  XGpio_SetDataDirection(Instance0Ptr, 2, 0x00000000); // set LED Gpio0Instance channel tristates to All Output
	  XGpio_SetDataDirection(Instance0Ptr, 1, 0xFFFFFFFF); // set BTN Gpio0Instance channel tristates to All Input
	  XGpio_SetDataDirection(Instance1Ptr, 2, 0x00000000); // set internal outputs Gpio0Instance channel tristates to All output
	  XGpio_SetDataDirection(Instance1Ptr, 1, 0xFFFFFFFF); // set internal inputs Gpio0Instance channel tristates to All Input
	  return XST_SUCCESS;
}

int InitialiseRecieveChain(XLlFifo *InstancePtr, u16 DeviceId){
  XLlFifo_Config *Config;
	int status;
	status = XST_SUCCESS;

  /* Initialise the Device Configuration Interface driver */
  Config = XLlFfio_LookupConfig(DeviceId);
	if (!Config) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
  /*
	 * Initialise with a physical address
	 */
  status = XLlFifo_CfgInitialize(InstancePtr, Config, Config->BaseAddress);
	if (status != XST_SUCCESS) {
		xil_printf("Initialisation failed\n\r");
		return status;
	}

  /* Check for the Reset value */
	status = XLlFifo_status(InstancePtr);
	XLlFifo_IntClear(InstancePtr,0xffffffff);
	status = XLlFifo_status(InstancePtr);
	if(status != 0x0) {
		xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
			    "Expected : 0x0\n\r",
			    XLlFifo_status(InstancePtr));
		return XST_FAILURE;
	}

	return status;
}

int RecieveSamples(XLlFifo *InstancePtr, u32* DestinationAddr){
  int i;
	int status;
	u32 RxWord;
  u32 ReceiveLength;

  xil_printf("Receiving data ....\n\r");

  /* Read Receive Length */
	ReceiveLength = (XLlFifo_iRxGetLen(InstancePtr))/WORD_SIZE;

	/* Start Receiving */
	for ( i=0; i < ReceiveLength; i++){
		RxWord = 0;
		RxWord = XLlFifo_RxGetWord(InstancePtr);

		if(XLlFifo_iRxOccupancy(InstancePtr)){
			RxWord = XLlFifo_RxGetWord(InstancePtr);
		}
		*(DestinationAddr+i) = RxWord;
	}

	status = XLlFifo_IsRxDone(InstancePtr);
	if(status != TRUE){
		xil_printf("Failing in receive complete ... \r\n");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int TransmitSamplesOverUART(u32 DestinationAddr){
    u32 addr = DestinationAddr;

    print("RAWDATA\n\r"); //Keyword for Matlab GUI

	while(addr < (DestinationAddr + NumSamplesToTx * WORD_SIZE)){
    xil_printf("%08x",Xil_In32(addr));
    print("\n\r");
    addr += WORD_SIZE;
    }

    return XST_SUCCESS;
}

int ProgramOscillator(XSpi *SpiInstancePtr, u16 SpiDeviceId){
	int status;
	static u8 Registers[6][SPI_TX_BUFFER_SIZE] = { //Reversed and upside down!
				{0x05, 0x00, 0x58, 0x00},
				{0x24, 0x00, 0x95, 0x00},
				{0xB3, 0x04, 0x80, 0x00},
				{0x42, 0x4E, 0x00, 0x00},
				{0xC9, 0x80, 0x00, 0x00},
				{0xB0, 0x00, 0x45, 0x00}
									 	};

	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */


	// Initialize the SPI driver so that it is ready to use.
	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr,
				  ConfigPtr->BaseAddress);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	//Set the Spi device as a master.

	status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Start the SPI driver so that the device is enabled.
	XSpi_Start(SpiInstancePtr);

	// Disable Global interrupt to use polled mode operation.
	XSpi_IntrGlobalDisable(SpiInstancePtr);

	// Select the slave device
    XSpi_SetSlaveSelect(SpiInstancePtr, 1);


	// Transmit the data.
	XSpi_Transfer(SpiInstancePtr, Registers[0], NULL, 24);


	return XST_SUCCESS;
}

int IsBTN1Pressed(void){
  int gpioValue;
  gpioValue = XGpio_DiscreteRead(&Gpio0Instance, 1);
  if ((gpioValue & BTN1_MASK) == BTN1_MASK ){
    xil_printf("BTN1 Pressed\n\r");
    return 1;
  }
  return 0;
}

int HandleSerialCommand(void){
  	int status;

	if (!XUartLite_IsReceiveEmpty(UART_BASE_ADDR)){
  			switch(XUartLite_RecvByte(UART_BASE_ADDR)) {
  			case '0' ://Set number of samples
  				xil_printf("NUMOFSAMPLES\n\r");
  				int rec[5];
  				rec[0] = XUartLite_RecvByte(UART_BASE_ADDR);
  				rec[1] = XUartLite_RecvByte(UART_BASE_ADDR);
  				rec[2] = XUartLite_RecvByte(UART_BASE_ADDR);
  				rec[3] = XUartLite_RecvByte(UART_BASE_ADDR);
  				rec[4] = XUartLite_RecvByte(UART_BASE_ADDR);
  				NumSamplesToTx = rec[1] + rec[2]*0x100;
  				xil_printf("NUMOFSAMPLES received\n\r");
  				if(NumSamplesToTx > 8000){
  					xil_printf("Error: Over sample number limit\n\r");
  					NumSamplesToTx = 8000;
  				}
  				break;
  			case '1': //Program Oscillator
  				status = ProgramOscillator(&SpiInstance, SPI_DEV_ID);
  				if (status != XST_SUCCESS) {
  					xil_printf("Oscillator communication Failed\r\n");
  					return XST_FAILURE;
  				}
  				xil_printf("Successfully ran oscillator communication\r\n");
  				break;
  			case '\r' :
  				xil_printf("Ignoring line feed\n\r");
  				break;
  			default:
  				xil_printf("Error: Unknown command\n\r");
  			}
        return 1;
  		}
      else{
        return 0;
      }
}

void CheckStatus(int status){
  if (status != XST_SUCCESS) {
		xil_printf("Failed status checkn\r");
	}
  xil_printf("Successfully ran\n\r");
}

void Reset(){
	XGpio_DiscreteWrite(&Gpio1Instance, 2, RESET_MASK); //Pulls RESET high
}
