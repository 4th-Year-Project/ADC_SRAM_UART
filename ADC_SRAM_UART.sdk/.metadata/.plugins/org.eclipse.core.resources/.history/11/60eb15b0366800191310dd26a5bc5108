/***************************** Include Files *********************************/
#include "xparameters.h"
#include "xspi.h"
#include "xspi_l.h"
#include "xil_printf.h"
/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */


/*
 *  This is the size of the buffer to be transmitted/received in this example.
 *  4 bytes corresponds to the length of the ADF4351's Registers.
 */
#define BUFFER_SIZE		4

/**************************** Type Definitions *******************************/

/*
 * The following data type is used to send data on the SPI
 * interface.
 */
typedef u8 DataBuffer[BUFFER_SIZE];

/************************** Function Prototypes ******************************/

 int SpiProgramOsc(XSpi *SpiInstancePtr, u16 SpiDeviceId);

/************************** Variable Definitions *****************************/

/*
 * The instances to support the device drivers are global such that the
 * are initialized to zero each time the program runs.
 */

//Moved to main
/*
 * The following variables are used to read and write to the  Spi device, they
 * are global to avoid having large buffers on the stack.
 */


/******************************************************************************/
int SpiProgramOsc(XSpi *SpiInstancePtr, u16 SpiDeviceId)
{

	u8 Registers[6][BUFFER_SIZE] = { //Reversed and upside down!
			{0x05, 0x00, 0x58, 0x00},
			{0x24, 0x00, 0x95, 0x00},
			{0xB3, 0x04, 0x80, 0x00},
			{0x42, 0x4E, 0x00, 0x00},
			{0xC9, 0x80, 0x00, 0x00},
			{0xB0, 0x00, 0x45, 0x00}
								 	};

	int Status;
	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */


	// Initialize the SPI driver so that it is ready to use.
	ConfigPtr = XSpi_LookupConfig(SpiDeviceId);
	if (ConfigPtr == NULL) {
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr,
				  ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	//Set the Spi device as a master.

	Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Start the SPI driver so that the device is enabled.
	XSpi_Start(SpiInstancePtr);

	// Disable Global interrupt to use polled mode operation.
	XSpi_IntrGlobalDisable(SpiInstancePtr);

	// Select the slave device
    XSpi_SetSlaveSelect(SpiInstancePtr, 1);


	// Transmit the data.
	XSpi_Transfer(SpiInstancePtr, Registers[0], NULL, 24);


	return XST_SUCCESS;
}
