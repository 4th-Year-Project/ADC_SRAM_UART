#include "xparameters.h"
#include "xgpio.h"
#include "xil_exception.h"
#include "xstreamer.h"
#include "xil_cache.h"
#include "xllfifo.h"
#include "xstatus.h"
#include <xuartlite_l.h>


#define ADC1_FIFO_DEV_ID	   	XPAR_AXI_FIFO_0_DEVICE_ID   /* ADC1 Fifo instance */
#define ADC2_FIFO_DEV_ID	   	XPAR_AXI_FIFO_1_DEVICE_ID   /* ADC2 Fifo instance */

#define BTN1_MASK 0b1				/* Bit mask for BTN1*/
#define LED1_MASK 0b1				/* Bit mask for BTN1*/
#define LED2_MASK 0b10				/* Bit mask for BTN1*/
#define ADC1_DONE_MASK 0b1  		/* Bit mask for ADC 1  DONE */
#define ADC2_DONE_MASK 0b10  		/* Bit mask for ADC 2 DONE */
#define ADCs_DONE_MASK (ADC1_DONE_MASK|ADC2_DONE_MASK)  		/* Bit mask all ADCs DONE */
#define ADC1_ENABLE_MASK 0b10  		/* Bit mask for ADC 1 ENABLE */
#define ADC2_ENABLE_MASK 0b100  	/* Bit mask for ADC 2 ENABLE */
#define ADCs_ENABLE_MASK (ADC1_ENABLE_MASK|ADC2_ENABLE_MASK) 	/* Bit mask for all ADCs ENABLE */
#define RESET_MASK 0b1  			/* Bit mask for Software Reset */

#define WORD_SIZE 4					/* Size of words in bytes */
#define SAMPLES_PER_ADC 32000		/* Total number of samples per ADC*/

#define UART_BASE_ADDR 0x40600000   /* Base Address of UART IP */

#undef DEBUG

/************************** Function Prototypes ******************************/
int GPIOInit(XGpio *Instance0Ptr, XGpio *Instance1Ptr);
int RxInit(XLlFifo *InstancePtr, u16 DeviceId);
int RxSamples(XLlFifo *InstancePtr, u32 *DestinationAddr);
int TxUART(u32 DestinationAddr);
void Reset(void);

/************************** Variable Definitions *****************************/

XLlFifo FifoInstance1;
XLlFifo FifoInstance2;
XGpio gpio0; // the gpio0 struct for LEDs and buttons
XGpio gpio1; // gpio struct for internal devices
u32 SRAMBaseAddr = 0x60000000;

static u32 ReceiveLength;

/******************************* Functions ***********************************/
int main (){
  int Status;

/*--- Initialise ---*/
  u32 read = 0;

  xil_printf("RESET\n\r");

  Status = GPIOInit(&gpio0, &gpio1); //Init GPIO blocks
  if (Status != XST_SUCCESS) {
		xil_printf("Initialisation of XGpio\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully ran Initialisation of XGpio\n\r");

  Status = RxInit(&FifoInstance1, ADC1_FIFO_DEV_ID); // Initaise ADC1 Rx chain
  if (Status != XST_SUCCESS) {
		xil_printf("Initialisation of ADC1 Rx chain failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully ran Initialisation of ADC1 Rx chain\n\r");

  Status = RxInit(&FifoInstance2, ADC2_FIFO_DEV_ID); // Initaise ADC2 Rx chain
  if (Status != XST_SUCCESS) {
		xil_printf("Initialisation of ADC2 Rx chain failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully ran Initialisation of ADC2 Rx chain\n\r");

  xil_printf("Successfully ran Initialisation of all ADCs Rx chain\n\r");


  XGpio_DiscreteWrite(&gpio0, 2, LED1_MASK); //Turn on LED1 (to show programming is successful)

/*--- Start the ADC sampling to fill FIFO ---*/
	xil_printf("Press sample button now\n\r");
	//Wait for button 1 press or NUMOFSAMPLE setting
	while (1){
		read = XGpio_DiscreteRead(&gpio0, 1);
		if ((read & BTN1_MASK) !=0 ){
			xil_printf("BTN1 Pressed\n\r");
			break;
		}
		if (XUartLite_IsReceiveEmpty(UART_BASE_ADDR)){
			switch(XUartLite_RecvByte(UART_BASE_ADDR)) {
			case '0' :
				xil_printf("NUMOFSAMPLES received\n\r");
			break;

			}



		}
	}
	//Start Sampling
	XGpio_DiscreteWrite(&gpio1, 2, ADCs_ENABLE_MASK ); //Sends enable signal to ADCs
	XGpio_DiscreteWrite(&gpio0, 2, LED2_MASK); //Turn on LED2
	//Waits for sampling to finish
	while (1){
		read = XGpio_DiscreteRead(&gpio1, 1);
		if ((read & ADCs_DONE_MASK) == ADCs_DONE_MASK){
			xil_printf("Sampling done\n\r");
			XGpio_DiscreteWrite(&gpio0, 2, (LED1_MASK | LED2_MASK)); //Turn on LED2
			break;

		}
	}

/*--- Transfer to SRAM ---*/
  xil_printf("Will transfer via SRAM\n\r");

  Status = RxSamples(&FifoInstance1, SRAMBaseAddr);
  if (Status != XST_SUCCESS) {
		xil_printf("Receiving of ADC1 samples failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully ran receiving of ADC1 samples\n\r");

  Status = RxSamples(&FifoInstance2, SRAMBaseAddr + (SAMPLES_PER_ADC));
  if (Status != XST_SUCCESS) {
		xil_printf("Receiving of ADC2 samples failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully ran receiving of ADC2 samples\n\r");

/*--- Send over UART ---*/
  xil_printf("ADC1 ");
  Status = TxUART(SRAMBaseAddr); //Send ADC1 data over UART
  if (Status != XST_SUCCESS) {
		xil_printf("Sending ADC1 over UART Failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully sent ADC1 over UART\n\r");

  xil_printf("ADC2 ");
  Status = TxUART(SRAMBaseAddr + SAMPLES_PER_ADC); //Send ADC1 data over UART
  if (Status != XST_SUCCESS) {
		xil_printf("Sending ADC2 over UART Failed\n\r");
		return XST_FAILURE;
	}
  xil_printf("Successfully sent ADC2 over UART\n\r");

/*--- Reset ---*/
  xil_printf("Resetting\n\r");
  Reset();
  return XST_SUCCESS;
  }

int GPIOInit(XGpio *Instance0Ptr, XGpio *Instance1Ptr){
	  XGpio_Initialize(Instance0Ptr, 0); //inits the gpio0 for LEDs and BUttons
	  XGpio_Initialize(Instance1Ptr,1); //Initis the gpio0 for internal devices
	  XGpio_SetDataDirection(Instance0Ptr, 2, 0x00000000); // set LED gpio0 channel tristates to All Output
	  XGpio_SetDataDirection(Instance0Ptr, 1, 0xFFFFFFFF); // set BTN gpio0 channel tristates to All Input
	  XGpio_SetDataDirection(Instance1Ptr, 2, 0x00000000); // set internal outputs gpio0 channel tristates to All output
	  XGpio_SetDataDirection(Instance1Ptr, 1, 0xFFFFFFFF); // set internal inputs gpio0 channel tristates to All Input
	  return XST_SUCCESS;
}

int RxInit(XLlFifo *InstancePtr, u16 DeviceId){
  XLlFifo_Config *Config;
	int Status;
	Status = XST_SUCCESS;

  /* Initialise the Device Configuration Interface driver */
  Config = XLlFfio_LookupConfig(DeviceId);
	if (!Config) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}
  /*
	 * Initialise with a physical address
	 */
  Status = XLlFifo_CfgInitialize(InstancePtr, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialisation failed\n\r");
		return Status;
	}

  /* Check for the Reset value */
	Status = XLlFifo_Status(InstancePtr);
	XLlFifo_IntClear(InstancePtr,0xffffffff);
	Status = XLlFifo_Status(InstancePtr);
	if(Status != 0x0) {
		xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
			    "Expected : 0x0\n\r",
			    XLlFifo_Status(InstancePtr));
		return XST_FAILURE;
	}

	return Status;
}

int RxSamples(XLlFifo *InstancePtr, u32* DestinationAddr){
    int i;
	int Status;
	u32 RxWord;


  xil_printf("Receiving data ....\n\r");

  /* Read Receive Length */
	ReceiveLength = (XLlFifo_iRxGetLen(InstancePtr))/WORD_SIZE;

	/* Start Receiving */
	for ( i=0; i < ReceiveLength; i++){
		RxWord = 0;
		RxWord = XLlFifo_RxGetWord(InstancePtr);

		if(XLlFifo_iRxOccupancy(InstancePtr)){
			RxWord = XLlFifo_RxGetWord(InstancePtr);
		}
		*(DestinationAddr+i) = RxWord;
	}

	Status = XLlFifo_IsRxDone(InstancePtr);
	if(Status != TRUE){
		xil_printf("Failing in receive complete ... \r\n");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

int TxUART(u32 DestinationAddr){
    u32 addr = DestinationAddr;

    print("RAWDATA\n\r"); //Keyword for Matlab GUI

    ReceiveLength = 200;

	while(addr < (DestinationAddr + ReceiveLength* WORD_SIZE)){
    xil_printf("%08x",Xil_In32(addr));
    print("\n\r");
    addr += WORD_SIZE;
    }

    return XST_SUCCESS;
}

void Reset(){
	XGpio_DiscreteWrite(&gpio1, 2, RESET_MASK); //Pulls RESET high
}

